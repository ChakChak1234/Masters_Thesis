{
    "contents" : "# Load .csv files for pre/post for the three conditions\nPANAS<-read.csv(\"PANAS.csv\")\nlibrary(vegan)\nlibrary(MASS)\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(directlabels)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(smacof)\n\n##### Use MDS to obtain original scale values ---------------------------------\n## Anger Condition\nang<-PANAS[PANAS$Scene.Order %in% c(1,2),]\nang.ori<-metaMDS(na.omit(ang[,5:44]), stress=.05, k=4, trymax=1000,trace = TRUE)\n## Anxiety Condition\nanx<-PANAS[PANAS$Scene.Order %in% c(3,4),]\nanx.ori<-metaMDS(na.omit(anx[,5:44]), stress=.05, k=4, trymax=1000,trace = TRUE)\n## Neutral Condition\nneu<-PANAS[PANAS$Scene.Order %in% c(5,6),]\nneu.ori<-metaMDS(na.omit(neu[,5:44]), stress=.05, k=4, trymax=1000,trace = TRUE)\n\n##### Bootstrap samples to estimate standard errors of scale values -----------\n### Bootstrap 1000 dataset simulations, and metaMDS() on each dataset ---------\n## Anger Condition\nang.boot.1000<-list() # empty list to store 1000 bootstrapped samples\nang.MDS.1000<-list() # empty list to store 1000 metaMDS() outputs\nfor(i in 1:1000){\n  # Sample 200 cases from original data\n  a<-ang[sample(nrow(ang), replace=T),]\n  ang.boot.1000[[i]]<-a # Store in list(ang.boot.1000)\n  # Apply metaMDS() using euclidean distance and 6 dimensions\n  b<-metaMDS(na.omit(ang.boot.1000[[i]][,5:44]), stress=.05, k=4, trymax=1000,trace = 1)\n  ang.MDS.1000[[i]]<-b # Store in list(ang.MDS.1000)\n  # Report Progress at every 50th Iteration\n  if(i %% 50==0) {\n    # Print on the screen some message\n    cat(paste0(\"<<<iteration: \", i, \">>>\\n\"))\n  }\n  Sys.sleep(0.1) # Just for waiting a bit in this example\n}\n## Anxiety Condition\nanx.boot.1000<-list() # empty list to store 1000 bootstrapped samples\nanx.MDS.1000<-list() # empty list to store 1000 metaMDS() outputs\nfor(i in 1:1000){\n  # Sample 200 cases from original data\n  a<-ang[sample(nrow(anx), replace=T),]\n  anx.boot.1000[[i]]<-a # Store in list(anx.boot.1000)\n  # Apply metaMDS() using euclidean distance and 6 dimensions\n  b<-metaMDS(na.omit(anx.boot.1000[[i]][,5:44]), stress=.05, k=4, trymax=1000,trace = 1)\n  anx.MDS.1000[[i]]<-b # Store in list(anx.MDS.1000)\n  # Report Progress at every 50th Iteration\n  if(i %% 50==0) {\n    # Print on the screen some message\n    cat(paste0(\"<<<iteration: \", i, \">>>\\n\"))\n  }\n  Sys.sleep(0.1) # Just for waiting a bit in this example\n}\n## Neutral Condition\nneu.boot.1000<-list() # empty list to store 1000 bootstrapped samples\nneu.MDS.1000<-list() # empty list to store 1000 metaMDS() outputs\nfor(i in 1:1000){\n  # Sample 200 cases from original data\n  a<-ang[sample(nrow(neu), replace=T),]\n  neu.boot.1000[[i]]<-a # Store in list(neu.boot.1000)\n  # Apply metaMDS() using euclidean distance and 6 dimensions\n  b<-metaMDS(na.omit(neu.boot.1000[[i]][,5:44]), stress=.05, k=4, trymax=1000,trace = 1)\n  neu.MDS.1000[[i]]<-b # Store in list(neu.MDS.1000)\n  # Report Progress at every 50th Iteration\n  if(i %% 50==0) {\n    # Print on the screen some message\n    cat(paste0(\"<<<iteration: \", i, \">>>\\n\"))\n  }\n  Sys.sleep(0.1) # Just for waiting a bit in this example\n}\n\n\n##### Determine Statistical Significance of Scale-values ----------------------\n## Anger Condition\nang.dim<-list()\ndim1<-list() # empty list to store dimension 1's output\nfor(i in 1:1000) {\n  a <- ang.MDS.1000[[i]]$species[,1]\n  dim1[[i]] <- a\n}\nang.m1 <- do.call(cbind, lapply(dim1, c, recursive=TRUE))\n# Obtain standard error\nse<-apply(ang.m1, 1, sd)\nang.dim[[1]]<-se\n# z test to see if the distribution of scale-values is significantly different from 0\npvalue<-2*pnorm(-abs(((ang.ori$species[,1]) - 0)/(se)))\nang.dim[[2]]<-pvalue\n\ndim2<-list() # empty list to store dimension 2's output\nfor(i in 1:1000) {\n  a <- ang.MDS.1000[[i]]$species[,2]\n  dim2[[i]] <- a\n}\nang.m2 <- do.call(cbind, lapply(dim2, c, recursive=TRUE))\n# Obtain standard error\nse<-apply(ang.m2, 1, sd)\nang.dim[[3]]<-se\n# z test to see if the distribution of scale-values is significantly different from 0\npvalue<-2*pnorm(-abs(((ang.ori$species[,2]) - 0)/(se)))\nang.dim[[4]]<-pvalue\n\ndim3<-list() # empty list to store dimension 3's output\nfor(i in 1:1000) {\n  a <- ang.MDS.1000[[i]]$species[,3]\n  dim3[[i]] <- a\n}\nang.m3 <- do.call(cbind, lapply(dim3, c, recursive=TRUE))\n# Obtain standard error\nse<-apply(ang.m3, 1, sd)\nang.dim[[5]]<-se\n# z test to see if the distribution of scale-values is significantly different from 0\npvalue<-2*pnorm(-abs(((ang.ori$species[,3]) - 0)/(se)))\nang.dim[[6]]<-pvalue\n\ndim4<-list() # empty list to store dimension 4's output\nfor(i in 1:1000) {\n  a <- ang.MDS.1000[[i]]$species[,4]\n  dim4[[i]] <- a\n}\nang.m4 <- do.call(cbind, lapply(dim4, c, recursive=TRUE))\n# Obtain standard error\nse<-apply(ang.m4, 1, sd)\nang.dim[[7]]<-se\n# z test to see if the distribution of scale-values is significantly different from 0\npvalue<-2*pnorm(-abs(((ang.ori$species[,4]) - 0)/(se)))\nang.dim[[8]]<-pvalue\n\n## Anxiety Condition\nanx.dim<-list()\ndim1<-list() # empty list to store dimension 1's output\nfor(i in 1:1000) {\n  a <- anx.MDS.1000[[i]]$species[,1]\n  dim1[[i]] <- a\n}\nanx.m1 <- do.call(cbind, lapply(dim1, c, recursive=TRUE))\n# Obtain standard error\nse<-apply(anx.m1, 1, sd)\nanx.dim[[1]]<-se\n# z test to see if the distribution of scale-values is significantly different from 0\npvalue<-2*pnorm(-abs(((anx.ori$species[,1]) - 0)/(se)))\nanx.dim[[2]]<-pvalue\n\ndim2<-list() # empty list to store dimension 2's output\nfor(i in 1:1000) {\n  a <- anx.MDS.1000[[i]]$species[,2]\n  dim2[[i]] <- a\n}\nanx.m2 <- do.call(cbind, lapply(dim2, c, recursive=TRUE))\n# Obtain standard error\nse<-apply(anx.m2, 1, sd)\nanx.dim[[3]]<-se\n# z test to see if the distribution of scale-values is significantly different from 0\npvalue<-2*pnorm(-abs(((anx.ori$species[,2]) - 0)/(se)))\nanx.dim[[4]]<-pvalue\n\ndim3<-list() # empty list to store dimension 3's output\nfor(i in 1:1000) {\n  a <- anx.MDS.1000[[i]]$species[,3]\n  dim3[[i]] <- a\n}\nanx.m3 <- do.call(cbind, lapply(dim3, c, recursive=TRUE))\n# Obtain standard error\nse<-apply(anx.m3, 1, sd)\nanx.dim[[5]]<-se\n# z test to see if the distribution of scale-values is significantly different from 0\npvalue<-2*pnorm(-abs(((anx.ori$species[,3]) - 0)/(se)))\nanx.dim[[6]]<-pvalue\n\ndim4<-list() # empty list to store dimension 4's output\nfor(i in 1:1000) {\n  a <- anx.MDS.1000[[i]]$species[,4]\n  dim4[[i]] <- a\n}\nanx.m4 <- do.call(cbind, lapply(dim4, c, recursive=TRUE))\n# Obtain standard error\nse<-apply(anx.m4, 1, sd)\nanx.dim[[7]]<-se\n# z test to see if the distribution of scale-values is significantly different from 0\npvalue<-2*pnorm(-abs(((anx.ori$species[,4]) - 0)/(se)))\nanx.dim[[8]]<-pvalue\n\n## Neutral Condition\nneu.dim<-list()\ndim1<-list() # empty list to store dimension 1's output\nfor(i in 1:1000) {\n  a <- neu.MDS.1000[[i]]$species[,1]\n  dim1[[i]] <- a\n}\nneu.m1 <- do.call(cbind, lapply(dim1, c, recursive=TRUE))\n# Obtain standard error\nse<-apply(neu.m1, 1, sd)\nneu.dim[[1]]<-se\n# z test to see if the distribution of scale-values is significantly different from 0\npvalue<-2*pnorm(-abs(((neu.ori$species[,1]) - 0)/(se)))\nneu.dim[[2]]<-pvalue\n\ndim2<-list() # empty list to store dimension 2's output\nfor(i in 1:1000) {\n  a <- neu.MDS.1000[[i]]$species[,2]\n  dim2[[i]] <- a\n}\nneu.m2 <- do.call(cbind, lapply(dim2, c, recursive=TRUE))\n# Obtain standard error\nse<-apply(neu.m2, 1, sd)\nneu.dim[[3]]<-se\n# z test to see if the distribution of scale-values is significantly different from 0\npvalue<-2*pnorm(-abs(((neu.ori$species[,2]) - 0)/(se)))\nneu.dim[[4]]<-pvalue\n\ndim3<-list() # empty list to store dimension 3's output\nfor(i in 1:1000) {\n  a <- neu.MDS.1000[[i]]$species[,3]\n  dim3[[i]] <- a\n}\nneu.m3 <- do.call(cbind, lapply(dim3, c, recursive=TRUE))\n# Obtain standard error\nse<-apply(neu.m3, 1, sd)\nneu.dim[[5]]<-se\n# z test to see if the distribution of scale-values is significantly different from 0\npvalue<-2*pnorm(-abs(((neu.ori$species[,3]) - 0)/(se)))\nneu.dim[[6]]<-pvalue\n\ndim4<-list() # empty list to store dimension 4's output\nfor(i in 1:1000) {\n  a <- neu.MDS.1000[[i]]$species[,4]\n  dim4[[i]] <- a\n}\nneu.m4 <- do.call(cbind, lapply(dim4, c, recursive=TRUE))\n# Obtain standard error\nse<-apply(neu.m4, 1, sd)\nneu.dim[[7]]<-se\n# z test to see if the distribution of scale-values is significantly different from 0\npvalue<-2*pnorm(-abs(((neu.ori$species[,4]) - 0)/(se)))\nneu.dim[[8]]<-pvalue\n\n#### Table.1 Original scale-values and Standard Errors ------------------------\n## Anger Condition\nang.final<-cbind(Condition=c(rep(\"Pre\",20),rep(\"Post\",20)), \n                 ang.dim[[2]],ang.dim[[1]],ang.dim[[4]],ang.dim[[3]],\n                 ang.dim[[6]],ang.dim[[5]],ang.dim[[8]],ang.dim[[7]])\ncolnames(ang.final)<-c(\"Condition\", \"dim1.pval\", \"dim1.se\", \"dim2.pval\", \"dim2.se\",\n                       \"dim3.pval\", \"dim3.se\", \"dim4.pval\", \"dim4.se\")\nrow.names(ang.final) = substr(row.names(ang.final),3,nchar(row.names(ang.final)))\nrow.names(ang.final)[1:20] = substr(row.names(ang.final)[1:20],2,nchar(row.names(ang.final)[1:20]))\n# Table with scale values and error estimates\ntest<-as.data.frame(unlist(ang.final[,seq(1,9,2)]))\ntestt<-as.data.frame(cbind(unlist(ang.ori$species[,1]),unlist(ang.ori$species[,2]),\n                           unlist(ang.ori$species[,3]),unlist(ang.ori$species[,4])))\nang.dim.sv.se<-as.data.frame(cbind(ang.final[,1],\n                                   testt[,1],ang.final[,3],testt[,2],ang.final[,5],\n                                   testt[,3],ang.final[,7],testt[,4],ang.final[,9]))\ncolnames(ang.dim.sv.se)<-c(\"Condition\", \"dim1.scale.value\", \"dim1.se\", \"dim2.scale.value\", \"dim2.se\",\n                           \"dim3.scale.value\", \"dim3.se\", \"dim4.scale.value\", \"dim4.se\")\n\n## Anxiety Condition\nanx.final<-cbind(Condition=c(rep(\"Pre\",20),rep(\"Post\",20)), \n                 anx.dim[[2]],anx.dim[[1]],anx.dim[[4]],anx.dim[[3]],\n                 anx.dim[[6]],anx.dim[[5]],anx.dim[[8]],anx.dim[[7]])\ncolnames(anx.final)<-c(\"Condition\", \"dim1.pval\", \"dim1.se\", \"dim2.pval\", \"dim2.se\",\n                       \"dim3.pval\", \"dim3.se\", \"dim4.pval\", \"dim4.se\")\nrow.names(anx.final) = substr(row.names(anx.final),3,nchar(row.names(anx.final)))\nrow.names(anx.final)[1:20] = substr(row.names(anx.final)[1:20],2,nchar(row.names(anx.final)[1:20]))\n# Table with scale values and error estimates\ntest<-as.data.frame(unlist(anx.final[,seq(1,9,2)]))\ntestt<-as.data.frame(cbind(unlist(anx.ori$species[,1]),unlist(anx.ori$species[,2]),\n                           unlist(anx.ori$species[,3]),unlist(anx.ori$species[,4])))\nanx.dim.sv.se<-as.data.frame(cbind(anx.final[,1],\n                                   testt[,1],anx.final[,3],testt[,2],anx.final[,5],\n                                   testt[,3],anx.final[,7],testt[,4],anx.final[,9]))\ncolnames(anx.dim.sv.se)<-c(\"Condition\", \"dim1.scale.value\", \"dim1.se\", \"dim2.scale.value\", \"dim2.se\",\n                           \"dim3.scale.value\", \"dim3.se\", \"dim4.scale.value\", \"dim4.se\")\n\n## Neutral Condition\nneu.final<-cbind(Condition=c(rep(\"Pre\",20),rep(\"Post\",20)), \n                 neu.dim[[2]],neu.dim[[1]],neu.dim[[4]],neu.dim[[3]],\n                 neu.dim[[6]],neu.dim[[5]],neu.dim[[8]],neu.dim[[7]])\ncolnames(neu.final)<-c(\"Condition\", \"dim1.pval\", \"dim1.se\", \"dim2.pval\", \"dim2.se\",\n                       \"dim3.pval\", \"dim3.se\", \"dim4.pval\", \"dim4.se\")\nrow.names(neu.final) = substr(row.names(neu.final),3,nchar(row.names(neu.final)))\nrow.names(neu.final)[1:20] = substr(row.names(neu.final)[1:20],2,nchar(row.names(neu.final)[1:20]))\n# Table with scale values and error estimates\ntest<-as.data.frame(unlist(neu.final[,seq(1,9,2)]))\ntestt<-as.data.frame(cbind(unlist(neu.ori$species[,1]),unlist(neu.ori$species[,2]),\n                           unlist(neu.ori$species[,3]),unlist(neu.ori$species[,4])))\nneu.dim.sv.se<-as.data.frame(cbind(neu.final[,1],\n                                   testt[,1],neu.final[,3],testt[,2],neu.final[,5],\n                                   testt[,3],neu.final[,7],testt[,4],neu.final[,9]))\ncolnames(neu.dim.sv.se)<-c(\"Condition\", \"dim1.scale.value\", \"dim1.se\", \"dim2.scale.value\", \"dim2.se\",\n                           \"dim3.scale.value\", \"dim3.se\", \"dim4.scale.value\", \"dim4.se\")\n\n#### Table.2 Compare pre- and post-test scores --------------------------------\n### Question Pre.Mean(SD) Post.Mean(SD) Pre-Post.Diff Paired-T.test P.value\n## Anger Condition\nmulti.fun <- function(x) { # Function to compute mean and standard deviation\n  c(Mean = mean(x,na.rm=TRUE), SD = sd(x,na.rm=TRUE))}\nang.mean<-cbind(unlist(lapply(ang[,5:44], multi.fun)))\nang.sum.stat<-data.frame(ang.mean[seq(1,40,2),],\n                         ang.mean[seq(2,40,2),],\n                         ang.mean[seq(41,80,2),],\n                         ang.mean[seq(42,80,2),])\ncolnames(ang.sum.stat) <- c(\"Pre.Mean\",\"Pre.SD\",\"Post.Mean\",\"Post.SD\")\nrow.names(ang.sum.stat) = substr(row.names(ang.sum.stat),4,nchar(row.names(ang.sum.stat)))\nang.sum.stat$Pre.Post.Diff<-ang.sum.stat[,3]-ang.sum.stat[,1]\na<-ang[,5:24]\nb<-ang[,25:44]\nab<-NULL\np<-NULL\nfor(i in 1:20){\n  meh<-t.test(a[,i],b[,i], paired=TRUE)\n  ab[i]<-meh$statistic\n  p[i]<-meh$p.value\n}\nang.sum.stat$Paired.t.test<-ab\nang.sum.stat$P.value<-p\n\n## Anxiety Condition\nanx.mean<-cbind(unlist(lapply(anx[,5:44], multi.fun)))\nanx.sum.stat<-data.frame(anx.mean[seq(1,40,2),],\n                         anx.mean[seq(2,40,2),],\n                         anx.mean[seq(41,80,2),],\n                         anx.mean[seq(42,80,2),])\ncolnames(anx.sum.stat) <- c(\"Pre.Mean\",\"Pre.SD\",\"Post.Mean\",\"Post.SD\")\nrow.names(anx.sum.stat) = substr(row.names(anx.sum.stat),4,nchar(row.names(anx.sum.stat)))\nanx.sum.stat$Pre.Post.Diff<-anx.sum.stat[,3]-anx.sum.stat[,1]\na<-anx[,5:24]\nb<-anx[,25:44]\nab<-NULL\np<-NULL\nfor(i in 1:20){\n  meh<-t.test(a[,i],b[,i], paired=TRUE)\n  ab[i]<-meh$statistic\n  p[i]<-meh$p.value\n}\nanx.sum.stat$Paired.t.test<-ab\nanx.sum.stat$P.value<-p\n\n## Neutral Condition\nneu.mean<-cbind(unlist(lapply(neu[,5:44], multi.fun)))\nneu.sum.stat<-data.frame(neu.mean[seq(1,40,2),],\n                         neu.mean[seq(2,40,2),],\n                         neu.mean[seq(41,80,2),],\n                         neu.mean[seq(42,80,2),])\ncolnames(neu.sum.stat) <- c(\"Pre.Mean\",\"Pre.SD\",\"Post.Mean\",\"Post.SD\")\nrow.names(neu.sum.stat) = substr(row.names(neu.sum.stat),4,nchar(row.names(neu.sum.stat)))\nneu.sum.stat$Pre.Post.Diff<-neu.sum.stat[,3]-neu.sum.stat[,1]\na<-neu[,5:24]\nb<-neu[,25:44]\nab<-NULL\np<-NULL\nfor(i in 1:20){\n  meh<-t.test(a[,i],b[,i], paired=TRUE)\n  ab[i]<-meh$statistic\n  p[i]<-meh$p.value\n}\nneu.sum.stat$Paired.t.test<-ab\nneu.sum.stat$P.value<-p\n\n#### Display Pre-Post Core Profiles of original scale-values ------------------\n## Anger Condition\n# Plot Dimension 1\noptions(digit=2)\ndf <- as.matrix(ang.dim.sv.se)\nrn <- row.names(ang.dim.sv.se)\ndf <- data.frame(df)\ndat <- df %>% select(Condition,dim1.scale.value) %>% mutate(Subscale=rn) \ndat <- dat %>% spread(Condition,dim1.scale.value) %>% rename(Post = `Post`,Pre = `Pre`) \ndat<- dat %>% mutate(diff=abs(as.numeric(dat$Post)-as.numeric(dat$Pre))) %>%\n  gather(Time,value,-Subscale,-diff)\npng(filename=\"Ang.Dim1.png\", width = 1300, height = 700)\nggplot(aes(x = Subscale, y = as.numeric(as.character(unlist(dat$value))), color = Time, group=Time), \n       data = dat, label = value) + \n  geom_point(aes(shape=Time, size=4)) + geom_line() + \n  geom_text(aes(label = round(as.numeric(as.character(unlist(dat$value))), 2)), \n            method=\"smart.grid\", color = \"black\",hjust=1,vjust=1) +\n  xlab(\"Subscales\") + ylab(\"Scale-value\") + ggtitle(\"Core Profile Dimension 1\") +\n  geom_point(data=filter(dat,diff>1,Time==\"Post\"),aes(x=Subscale,y=as.numeric(value)),color=\"black\",size=4)\ndev.off()\n# Plot Dimension 2\ndat <- df %>% select(Condition,dim2.scale.value) %>% mutate(Subscale=rn) \ndat <- dat %>% spread(Condition,dim2.scale.value) %>% rename(Post = `Post`,Pre = `Pre`) \ndat<- dat %>% mutate(diff=abs(as.numeric(dat$Post)-as.numeric(dat$Pre))) %>%\n  gather(Time,value,-Subscale,-diff)\npng(filename=\"Ang.Dim2.png\", width = 1300, height = 700)\nggplot(aes(x = Subscale, y = as.numeric(as.character(unlist(dat$value))), color = Time, group=Time), \n       data = dat, label = value) + \n  geom_point(aes(shape=Time, size=4)) + geom_line() + \n  geom_text(aes(label = round(as.numeric(as.character(unlist(dat$value))), 2)), \n            method=\"smart.grid\", color = \"black\",hjust=1,vjust=1) +\n  xlab(\"Subscales\") + ylab(\"Scale-value\") + ggtitle(\"Core Profile Dimension 2\") +\n  geom_point(data=filter(dat,diff>1,Time==\"Post\"),aes(x=Subscale,y=as.numeric(value)),color=\"black\",size=4)\ndev.off()\n# Plot Dimension 3\ndat <- df %>% select(Condition,dim3.scale.value) %>% mutate(Subscale=rn) \ndat <- dat %>% spread(Condition,dim3.scale.value) %>% rename(Post = `Post`,Pre = `Pre`) \ndat<- dat %>% mutate(diff=abs(as.numeric(dat$Post)-as.numeric(dat$Pre))) %>%\n  gather(Time,value,-Subscale,-diff)\npng(filename=\"Ang.Dim3.png\", width = 1300, height = 700)\nggplot(aes(x = Subscale, y = as.numeric(as.character(unlist(dat$value))), color = Time, group=Time), \n       data = dat, label = value) + \n  geom_point(aes(shape=Time, size=4)) + geom_line() + \n  geom_text(aes(label = round(as.numeric(as.character(unlist(dat$value))), 2)), \n            method=\"smart.grid\", color = \"black\",hjust=1,vjust=1) +\n  xlab(\"Subscales\") + ylab(\"Scale-value\") + ggtitle(\"Core Profile Dimension 3\") +\n  geom_point(data=filter(dat,diff>1,Time==\"Post\"),aes(x=Subscale,y=as.numeric(value)),color=\"black\",size=4)\ndev.off()\n# Plot Dimension 4\ndat <- df %>% select(Condition,dim4.scale.value) %>% mutate(Subscale=rn) \ndat <- dat %>% spread(Condition,dim4.scale.value) %>% rename(Post = `Post`,Pre = `Pre`) \ndat<- dat %>% mutate(diff=abs(as.numeric(dat$Post)-as.numeric(dat$Pre))) %>%\n  gather(Time,value,-Subscale,-diff)\npng(filename=\"Ang.Dim4.png\", width = 1300, height = 700)\nggplot(aes(x = Subscale, y = as.numeric(as.character(unlist(dat$value))), color = Time, group=Time), \n       data = dat, label = value) + \n  geom_point(aes(shape=Time, size=4)) + geom_line() + \n  geom_text(aes(label = round(as.numeric(as.character(unlist(dat$value))), 2)), \n            method=\"smart.grid\", color = \"black\",hjust=1,vjust=1) +\n  xlab(\"Subscales\") + ylab(\"Scale-value\") + ggtitle(\"Core Profile Dimension 4\") +\n  geom_point(data=filter(dat,diff>1,Time==\"Post\"),aes(x=Subscale,y=as.numeric(value)),color=\"black\",size=4)\ndev.off()\n\n## Anxiety Condition\n# Plot Dimension 1\noptions(digit=2)\ndf <- as.matrix(anx.dim.sv.se)\nrn <- row.names(anx.dim.sv.se)\ndf <- data.frame(df)\ndat <- df %>% select(Condition,dim1.scale.value) %>% mutate(Subscale=rn) \ndat <- dat %>% spread(Condition,dim1.scale.value) %>% rename(Post = `Post`,Pre = `Pre`) \ndat<- dat %>% mutate(diff=abs(as.numeric(dat$Post)-as.numeric(dat$Pre))) %>%\n  gather(Time,value,-Subscale,-diff)\npng(filename=\"anx.Dim1.png\", width = 1300, height = 700)\nggplot(aes(x = Subscale, y = as.numeric(as.character(unlist(dat$value))), color = Time, group=Time), \n       data = dat, label = value) + \n  geom_point(aes(shape=Time, size=4)) + geom_line() + \n  geom_text(aes(label = round(as.numeric(as.character(unlist(dat$value))), 2)), \n            method=\"smart.grid\", color = \"black\",hjust=1,vjust=1) +\n  xlab(\"Subscales\") + ylab(\"Scale-value\") + ggtitle(\"Core Profile Dimension 1\") +\n  geom_point(data=filter(dat,diff>1,Time==\"Post\"),aes(x=Subscale,y=as.numeric(value)),color=\"black\",size=4)\ndev.off()\n# Plot Dimension 2\ndat <- df %>% select(Condition,dim2.scale.value) %>% mutate(Subscale=rn) \ndat <- dat %>% spread(Condition,dim2.scale.value) %>% rename(Post = `Post`,Pre = `Pre`) \ndat<- dat %>% mutate(diff=abs(as.numeric(dat$Post)-as.numeric(dat$Pre))) %>%\n  gather(Time,value,-Subscale,-diff)\npng(filename=\"anx.Dim2.png\", width = 1300, height = 700)\nggplot(aes(x = Subscale, y = as.numeric(as.character(unlist(dat$value))), color = Time, group=Time), \n       data = dat, label = value) + \n  geom_point(aes(shape=Time, size=4)) + geom_line() + \n  geom_text(aes(label = round(as.numeric(as.character(unlist(dat$value))), 2)), \n            method=\"smart.grid\", color = \"black\",hjust=1,vjust=1) +\n  xlab(\"Subscales\") + ylab(\"Scale-value\") + ggtitle(\"Core Profile Dimension 2\") +\n  geom_point(data=filter(dat,diff>1,Time==\"Post\"),aes(x=Subscale,y=as.numeric(value)),color=\"black\",size=4)\ndev.off()\n# Plot Dimension 3\ndat <- df %>% select(Condition,dim3.scale.value) %>% mutate(Subscale=rn) \ndat <- dat %>% spread(Condition,dim3.scale.value) %>% rename(Post = `Post`,Pre = `Pre`) \ndat<- dat %>% mutate(diff=abs(as.numeric(dat$Post)-as.numeric(dat$Pre))) %>%\n  gather(Time,value,-Subscale,-diff)\npng(filename=\"anx.Dim3.png\", width = 1300, height = 700)\nggplot(aes(x = Subscale, y = as.numeric(as.character(unlist(dat$value))), color = Time, group=Time), \n       data = dat, label = value) + \n  geom_point(aes(shape=Time, size=4)) + geom_line() + \n  geom_text(aes(label = round(as.numeric(as.character(unlist(dat$value))), 2)), \n            method=\"smart.grid\", color = \"black\",hjust=1,vjust=1) +\n  xlab(\"Subscales\") + ylab(\"Scale-value\") + ggtitle(\"Core Profile Dimension 3\") +\n  geom_point(data=filter(dat,diff>1,Time==\"Post\"),aes(x=Subscale,y=as.numeric(value)),color=\"black\",size=4)\ndev.off()\n# Plot Dimension 4\ndat <- df %>% select(Condition,dim4.scale.value) %>% mutate(Subscale=rn) \ndat <- dat %>% spread(Condition,dim4.scale.value) %>% rename(Post = `Post`,Pre = `Pre`) \ndat<- dat %>% mutate(diff=abs(as.numeric(dat$Post)-as.numeric(dat$Pre))) %>%\n  gather(Time,value,-Subscale,-diff)\npng(filename=\"anx.Dim4.png\", width = 1300, height = 700)\nggplot(aes(x = Subscale, y = as.numeric(as.character(unlist(dat$value))), color = Time, group=Time), \n       data = dat, label = value) + \n  geom_point(aes(shape=Time, size=4)) + geom_line() + \n  geom_text(aes(label = round(as.numeric(as.character(unlist(dat$value))), 2)), \n            method=\"smart.grid\", color = \"black\",hjust=1,vjust=1) +\n  xlab(\"Subscales\") + ylab(\"Scale-value\") + ggtitle(\"Core Profile Dimension 4\") +\n  geom_point(data=filter(dat,diff>1,Time==\"Post\"),aes(x=Subscale,y=as.numeric(value)),color=\"black\",size=4)\ndev.off()\n\n## Neutral Condition\n# Plot Dimension 1\noptions(digit=2)\ndf <- as.matrix(neu.dim.sv.se)\nrn <- row.names(neu.dim.sv.se)\ndf <- data.frame(df)\ndat <- df %>% select(Condition,dim1.scale.value) %>% mutate(Subscale=rn) \ndat <- dat %>% spread(Condition,dim1.scale.value) %>% rename(Post = `Post`,Pre = `Pre`) \ndat<- dat %>% mutate(diff=abs(as.numeric(dat$Post)-as.numeric(dat$Pre))) %>%\n  gather(Time,value,-Subscale,-diff)\npng(filename=\"neu.Dim1.png\", width = 1300, height = 700)\nggplot(aes(x = Subscale, y = as.numeric(as.character(unlist(dat$value))), color = Time, group=Time), \n       data = dat, label = value) + \n  geom_point(aes(shape=Time, size=4)) + geom_line() + \n  geom_text(aes(label = round(as.numeric(as.character(unlist(dat$value))), 2)), \n            method=\"smart.grid\", color = \"black\",hjust=1,vjust=1) +\n  xlab(\"Subscales\") + ylab(\"Scale-value\") + ggtitle(\"Core Profile Dimension 1\") +\n  geom_point(data=filter(dat,diff>1,Time==\"Post\"),aes(x=Subscale,y=as.numeric(value)),color=\"black\",size=4)\ndev.off()\n# Plot Dimension 2\ndat <- df %>% select(Condition,dim2.scale.value) %>% mutate(Subscale=rn) \ndat <- dat %>% spread(Condition,dim2.scale.value) %>% rename(Post = `Post`,Pre = `Pre`) \ndat<- dat %>% mutate(diff=abs(as.numeric(dat$Post)-as.numeric(dat$Pre))) %>%\n  gather(Time,value,-Subscale,-diff)\npng(filename=\"neu.Dim2.png\", width = 1300, height = 700)\nggplot(aes(x = Subscale, y = as.numeric(as.character(unlist(dat$value))), color = Time, group=Time), \n       data = dat, label = value) + \n  geom_point(aes(shape=Time, size=4)) + geom_line() + \n  geom_text(aes(label = round(as.numeric(as.character(unlist(dat$value))), 2)), \n            method=\"smart.grid\", color = \"black\",hjust=1,vjust=1) +\n  xlab(\"Subscales\") + ylab(\"Scale-value\") + ggtitle(\"Core Profile Dimension 2\") +\n  geom_point(data=filter(dat,diff>1,Time==\"Post\"),aes(x=Subscale,y=as.numeric(value)),color=\"black\",size=4)\ndev.off()\n# Plot Dimension 3\ndat <- df %>% select(Condition,dim3.scale.value) %>% mutate(Subscale=rn) \ndat <- dat %>% spread(Condition,dim3.scale.value) %>% rename(Post = `Post`,Pre = `Pre`) \ndat<- dat %>% mutate(diff=abs(as.numeric(dat$Post)-as.numeric(dat$Pre))) %>%\n  gather(Time,value,-Subscale,-diff)\npng(filename=\"neu.Dim3.png\", width = 1300, height = 700)\nggplot(aes(x = Subscale, y = as.numeric(as.character(unlist(dat$value))), color = Time, group=Time), \n       data = dat, label = value) + \n  geom_point(aes(shape=Time, size=4)) + geom_line() + \n  geom_text(aes(label = round(as.numeric(as.character(unlist(dat$value))), 2)), \n            method=\"smart.grid\", color = \"black\",hjust=1,vjust=1) +\n  xlab(\"Subscales\") + ylab(\"Scale-value\") + ggtitle(\"Core Profile Dimension 3\") +\n  geom_point(data=filter(dat,diff>1,Time==\"Post\"),aes(x=Subscale,y=as.numeric(value)),color=\"black\",size=4)\ndev.off()\n# Plot Dimension 4\ndat <- df %>% select(Condition,dim4.scale.value) %>% mutate(Subscale=rn) \ndat <- dat %>% spread(Condition,dim4.scale.value) %>% rename(Post = `Post`,Pre = `Pre`) \ndat<- dat %>% mutate(diff=abs(as.numeric(dat$Post)-as.numeric(dat$Pre))) %>%\n  gather(Time,value,-Subscale,-diff)\npng(filename=\"neu.Dim4.png\", width = 1300, height = 700)\nggplot(aes(x = Subscale, y = as.numeric(as.character(unlist(dat$value))), color = Time, group=Time), \n       data = dat, label = value) + \n  geom_point(aes(shape=Time, size=4)) + geom_line() + \n  geom_text(aes(label = round(as.numeric(as.character(unlist(dat$value))), 2)), \n            method=\"smart.grid\", color = \"black\",hjust=1,vjust=1) +\n  xlab(\"Subscales\") + ylab(\"Scale-value\") + ggtitle(\"Core Profile Dimension 4\") +\n  geom_point(data=filter(dat,diff>1,Time==\"Post\"),aes(x=Subscale,y=as.numeric(value)),color=\"black\",size=4)\ndev.off()\n",
    "created" : 1471545808068.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "997714138",
    "id" : "DF08475F",
    "lastKnownWriteTime" : 1457643956,
    "path" : "C:/Users/Chak/Desktop/Master's Thesis/Report 9.7.15/progress.r",
    "project_path" : "progress.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}